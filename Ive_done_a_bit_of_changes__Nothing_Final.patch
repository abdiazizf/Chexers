Index: search.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- search.py	(revision e324048df28944b39df454895731f249614e28d9)
+++ search.py	(date 1554450580224)
@@ -10,6 +10,7 @@
 
 import sys
 import json
+import copy
 
 # TODO: Implement a move function for board to check for a valid move and then swap pieces
 # Also needs to print the specified output according to the project spec
@@ -30,6 +31,7 @@
     board_dict = convert_json_to_board_dict(data)
     # TODO: Search for and output winning sequence of moves
     # ...
+    print_board(board_dict)
     initial_state = Board(board_dict)
 
     initial_state.successor_board_states()
@@ -45,6 +47,7 @@
     board_state = {}
     state = {}
     pieces = []
+
     goal = {'R': [(3, -3), (3,-2) , (3,-1) , (3, 0)] , 'B':[(0, -3), (-1,-2) , (-2,-1) , (-3, 0)] , 'G' :[(-3, 3), (-2, 3) , (-1, 3) , (0, 3)]}
     target = []
     axial_directions = [(1, 0),(1, -1),(0, -1),(-1, 0),(-1, 1),(0, 1)]
@@ -57,11 +60,14 @@
         for entry in tuples:
             self.board_state[entry] = GameHex(False, False)
         for entry in initial_board:
-            if initial_board[entry] != 'BLK':
+            if initial_board[entry] in self.goal:
                 self.pieces.append(entry)
                 self.target = self.goal[initial_board[entry]]
-            self.board_state[entry].is_occupied = True
-            self.board_state[entry].occupied_by = initial_board[entry]
+                self.board_state[entry].is_occupied = True
+                self.board_state[entry].occupied_by = initial_board[entry]
+            elif initial_board[entry] != '-':
+                self.board_state[entry].is_occupied = True
+                self.board_state[entry].occupied_by = initial_board[entry]
 
 
     def successor_board_states(self):
@@ -70,19 +76,16 @@
         legal_moves = []
         legal_jumps =[]
         successor_states = []
-
-        for i in Board.axial_directions :
+        for i in Board.axial_directions:
             potential_moves.append((self.pieces[0][0]+i[0], self.pieces[0][1]+i[1]))
         for i in Board.axial_jump :
             potential_jump.append((self.pieces[0][0] + i[0], self.pieces[0][1] + i[1]))
-
         for i in potential_moves :
             if i[0] not  in range(-3,4) or  i[1] not in range(-3,4):
                continue
             elif self.board_state[i].is_occupied :
                 continue
             legal_moves.append(i)
-
         for i in potential_jump:
             if i[0] not in range(-3, 4) or i[1] not in range(-3, 4):
                 continue
@@ -93,20 +96,16 @@
             else:
                 continue
         for entry in legal_jumps :
-            successor_states.append(self.swap_position(self.pieces[0],entry))
-            print_board(self.state)
+            successor_states.append(swap_position(copy.deepcopy(self.state),self.pieces[0],entry))
+        for entry in legal_moves:
+            successor_states.append(swap_position(copy.deepcopy(self.state),self.pieces[0],entry))
 
-    def swap_position(self,move_from, move_to):
-        is_occupied =self.board_state[move_from].is_occupied
-        occupied_by = self.board_state[move_from].occupied_by
-        self.board_state[move_from].is_occupied = self.board_state[move_to].is_occupied
-        self.board_state[move_from].occupied_by = self.board_state[move_to].occupied_by
-        self.board_state[move_to].is_occupied=is_occupied
-        self.board_state[move_to].occupied_by = occupied_by
-        temp = self.state[move_from]
-        self.state[move_from] = self.state[move_to]
-        self.state[move_to] = temp
 
+def swap_position(state,move_from, move_to):
+    temp = state[move_from]
+    state[move_from] = state[move_to]
+    state[move_to] = temp
+    return state
 
 class GameHex:
 
@@ -131,7 +130,7 @@
     else :
         return 0
 
-def heuristic(board_state):
+def heuristic(board_state, piece):
     distance_x = board_state.target[0][0] - board_state.pieces[0][0]
     distance_y = board_state.target[0][1] - board_state.pieces[0][1]
     if same_sign(distance_x, distance_y):
@@ -143,6 +142,7 @@
 def convert_json_to_board_dict(file):
     # Reads colour from the JSON, compares it to a dictionary of values and
     # sets the correct symbol
+    tuples = [(x, y) for x in range(-3, 4) for y in range(-3, 4)]
     colour_dict = {'red' : 'R','blue': 'B','green':'G'}
     player_colour = colour_dict[file['colour']]
     # Creates an empty dict and constructs an entry for each tuple in JSON, using
@@ -153,6 +153,10 @@
     for coordinate in file['blocks']:
         board_dict[tuple(coordinate)] = 'BLK'
     # return dict
+
+    for pair in tuples :
+        if pair not in board_dict :
+            board_dict[pair] = '-'
     return board_dict
 
 
